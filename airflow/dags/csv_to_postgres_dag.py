# -*- coding: utf-8 -*-
"""csv_to_postgres_dag.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Rcv7yCvYcHBuyGivBq3gL0v4KpQONgjh
"""

from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import pandas as pd
from sqlalchemy import create_engine
import subprocess

# Define default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2025, 1, 25),
    'retries': 1,
    'retry_delay': timedelta(minutes=5),
}

# Define the DAG
dag = DAG(
    'csv_to_postgres_dag',
    default_args=default_args,
    description='A simple DAG to load CSV into Postgres and run DBT models',
    schedule_interval=timedelta(days=1),  # Run every 24 hours
)

# Task 1: Function to read CSV and load data into PostgreSQL
def load_csv_to_postgres():
    # Read the CSV file using pandas (adjust the path)
    df = pd.read_csv('C:/Users/sumit/OneDrive/Desktop/Raw_data/data.csv')

    # Create a connection to PostgreSQL (adjust connection details)
    engine = create_engine('postgresql://postgres:Radhekrishna@040@localhost:5432/itsm_db')

    # Load the data into PostgreSQL (adjust the table name)
    df.to_sql('raw_tickets', engine, if_exists='replace', index=False)

# Task 2: Trigger the DBT models
def run_dbt_models():
    # Trigger the DBT models (adjust if needed)
    subprocess.run(["dbt", "run"])

# Task 3: Validate the completion of DBT models
def validate_dbt_completion():
    # Add logic to check if the DBT models have successfully completed
    engine = create_engine('postgresql://postgres:Radhekrishna@040@localhost:5432/itsm_db')
    with engine.connect() as connection:
        result = connection.execute("SELECT COUNT(*) FROM processed_data")
        if result.fetchone()[0] > 0:
            print("DBT models completed successfully!")
        else:
            print("DBT models failed!")

# Define the Airflow tasks
task1 = PythonOperator(
    task_id='load_csv_to_postgres',
    python_callable=load_csv_to_postgres,
    dag=dag,
)

task2 = PythonOperator(
    task_id='run_dbt_models',
    python_callable=run_dbt_models,
    dag=dag,
)

task3 = PythonOperator(
    task_id='validate_dbt_completion',
    python_callable=validate_dbt_completion,
    dag=dag,
)

# Set the task dependencies
task1 >> task2 >> task3  # Run task1 first, then task2, and task3 last